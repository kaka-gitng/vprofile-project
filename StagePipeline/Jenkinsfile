pipeline {
    agent any

    tools {
        maven "MAVEN3"
        jdk "OracleJDK11"
    }

    environment {
        SNAP_REPO = 'vprofile-snapshot'
        NEXUS_USER = 'admin'
        NEXUS_PASS = 'Kamji123'
        RELEASE_REPO = 'vprofile-release'
        CENTRAL_REPO = 'vpro-maven-central'
        NEXUSIP = '172.31.60.220'
        NEXUSPORT = '8081'
        NEXUS_GRP_REPO = 'vpro-maven-group'
        NEXUS_LOGIN = 'nexuslogin'
        SONARSERVER = 'sonarserver'
        SONARSCANNER = 'sonarscanner'
        registryCredential = 'ecr:us-east-1:awscreds'
        appRegistry = '782434001163.dkr.ecr.us-east-1.amazonaws.com/vprofileappimg'
        vprofileRegistry = "https://782434001163.dkr.ecr.us-east-1.amazonaws.com/vprofileappimg"
        
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn -s settings.xml -DskipTests install'
            }
            post {
                success {
                    echo "Now Archiving"
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test') {
            steps {
                sh 'mvn -s settings.xml test'
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
                withSonarQubeEnv("${SONARSERVER}") {
                    sh """${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName=vprofile \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src/ \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                    -Dsonar.junit.reportsPath=target/surefire-reports/ \
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml"""
                }
            }
        }

        stage("Quality Gate") {
            steps {
                 timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                 }
            }
        }

        stage("Upload Artifact") {
            steps {
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                        groupId: 'QA',
                        version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                        repository: "${RELEASE_REPO}",
                        credentialsId: "${NEXUS_LOGIN}",
                        artifacts: [
                            [artifactId: 'vproapp',
                            classifier: '',
                            file: 'target/vprofile-v2.war',
                            type: 'war']
                        ]

                )
     
            }
        }

        stage('Build App Image') {
            steps {
                script {
                    dockerImage = docker.build( appRegistry + ":BUILD_NUMBER", "./Docker-files/app/multistage/" )
                }
            }
        }

        stage('Upload App Image') {
            steps {
                script {
                    docker.withRegistry( vprofileRegistry, registryCredential ) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }

        stage('Deploy to ECS Staging') {
            steps {
                withAWS(credentials: 'awscreds', region: 'us-east-1') {
                    script {
                    // Create ECS cluster
                    sh "aws ecs create-cluster --cluster-name vprostaging2"
                }
            }
        }
        
        stage('Deploy Image from ECR') {
            steps {
                script {
                    // Register task definition
                    sh """aws ecs register-task-definition --family vprofileapp-task \\
                        --container-definitions '[{
                            "name": "vprofileapp-container",
                            "image": "782434001163.dkr.ecr.us-east-1.amazonaws.com/vprofileappimg:latest",
                            "memory": 512,
                            "cpu": 256,
                            "essential": true
                        }]'
                    """
                    
                    // Create ECS service
                    sh "aws ecs create-service --cluster vprostaging2 --service-name vprofileapp-service \\
                        --task-definition vprofileapp-task --desired-count 1"
                }
            }
        }
        
    }
}
